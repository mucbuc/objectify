
namespace om636 {
/////////////////////////////////////////////////////////////////////////////////////////////
// time_slice
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
time_slice<T>::time_slice(const value_type& v)
    : m_value(v)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
typename time_slice<T>::value_type time_slice<T>::value() const
{
    return m_value;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
typename time_slice<T>::value_type& time_slice<T>::value()
{
    return m_value;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void time_slice<T>::swap(time_slice& t)
{
    std::swap(m_value, t.m_value);
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap(time_slice<T>& lhs, time_slice<T>& rhs)
{
    lhs.swap(rhs);
}

/////////////////////////////////////////////////////////////////////////////////////////////
// dynamic_base<time_slice>
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
dynamic_base<T>::dynamic_base(context_type& s)
    : base_type(s)
    , m_age(0)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
const typename dynamic_base<T>::value_type& dynamic_base<T>::age()
{
    return m_age;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void dynamic_base<T>::on_swap(const context_type&, const context_type& current)
{
    m_age += current.value_ref().value();
}

} // om636
