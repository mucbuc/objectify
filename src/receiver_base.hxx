namespace om636 {
/////////////////////////////////////////////////////////////////////////////////////////////
// event_info
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
event_info<T>::event_info(const point_type& p, const event_type& event_id)
    : m_position(p)
    , m_event_id(event_id)
    , m_touch_down(event_id == id_touch_down)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
event_info<T>::event_info(const unsigned& p, const event_type& event_id)
    : m_key_pressed(p)
    , m_event_id(event_id)
    , m_touch_down(false)
{
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void event_info<T>::swap(event_info<T>& rhs)
{
    using std::swap;
    using om636::swap;

    swap(m_key_pressed, rhs.m_key_pressed);
    swap(m_event_id, rhs.m_event_id);
    swap(m_touch_down, rhs.m_touch_down);
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
unsigned event_info<T>::key_pressed() const
{
    return m_key_pressed;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
unsigned& event_info<T>::key_pressed()
{
    return m_key_pressed;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
event_type event_info<T>::event_id() const
{
    return m_event_id;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
event_type& event_info<T>::event_id()
{
    return m_event_id;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
auto event_info<T>::position() const -> point_type
{
    return m_position;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
auto event_info<T>::position() -> point_type&
{
    return m_position;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
bool event_info<T>::touch_down() const
{
    return m_touch_down;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
bool& event_info<T>::touch_down()
{
    return m_touch_down;
}

/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void swap(event_info<T>& lhs, event_info<T>& rhs)
{
    lhs.swap(rhs);
}

/////////////////////////////////////////////////////////////////////////////////////////////
// receiver_base
/////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
receiver_base<T>::receiver_base(context_type& s)
    : base_type(s)
{
}
} // om636
